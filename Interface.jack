class Interface
{
   // Текстовые сообщения для экрана приветствия
   field string welcomeMessage1, welcomeMessage2, welcomeMessage3;
   
   // Сообщение для отображения счета игрока
   field string scoreMessage;
   
   // Сообщения для экрана завершения игры
   field string finalMessage1, finalMessage2, finalMessage3;
   
   // Надписи уровней сложности
   field string easyLevelMessage, mediumLevelMessage, hardLevelMessage;
   
   // Массив с названиями уровней сложности для отображения в счете
   field Array difficultyMessages;

   // X-координата указателя выбора сложности
   field int difficultyPointerX;
   
   // Массив Y-координат для позиционирования указателя на разных уровнях сложности
   field Array difficultyPointerYPositions;

   // Текущий выбранный уровень сложности (0=легкий, 1=средний, 2=сложный)
   field int currentDifficulty;
   
   
   constructor Interface new()
   {
      // Инициализация сообщений стартового экрана
      let welcomeMessage1 = "Управление: стрелки вверх/вниз ";
      let welcomeMessage2 = "Нажмите esc для выхода из заезда";
      let welcomeMessage3 = "Выберите уровень сложности:";

      // Инициализация названий уровней сложности
      let easyLevelMessage = "Легкий";
      let mediumLevelMessage = "Средний";
      let hardLevelMessage = "Сложный";

      // Текст перед значением счета
      let scoreMessage = "Счет: ";

      // Сообщения при завершении игры
      let finalMessage1 = "Вы проиграли";
      let finalMessage2 = "Ваш результат: ";
      let finalMessage3 = "Нажмите enter для продолжения";

      // Создание массива названий сложностей для отображения в игре
      let difficultyMessages = Array.new(3);
      let difficultyMessages[0] = "легкий / ";
      let difficultyMessages[1] = "средний / ";
      let difficultyMessages[2] = "сложный / ";


      // Настройка позиций указателя выбора сложности
      let difficultyPointerX = 200;  // Фиксированная позиция по X
      
      // Массив Y-позиций для каждого уровня сложности
      let difficultyPointerYPositions = Array.new(3);
      let difficultyPointerYPositions[0] = 135; // Позиция для "Легкий"
      let difficultyPointerYPositions[1] = 145; // Позиция для "Средний"
      let difficultyPointerYPositions[2] = 155; // Позиция для "Сложный"

      // Установка сложности по умолчанию (легкий)
      let currentDifficulty = 0;

      return this;
   }

   // Возвращает текущий уровень сложности
   method int getDifficulty()
   {
      return currentDifficulty;
   }

   // Отрисовка стартового экрана
   method void drawWelcomeWindow()
   {
      // Вывод инструкций управления
      do Output.moveCursor(9, 16);
      do Output.printString(welcomeMessage1);
      do Output.moveCursor(10, 16);
      do Output.printString(welcomeMessage2);
      do Output.moveCursor(11, 16);
      do Output.printString(welcomeMessage3);

      // Вывод вариантов сложности
      do Output.moveCursor(12, 28);
      do Output.printString(easyLevelMessage);
      do Output.moveCursor(13, 28);
      do Output.printString(mediumLevelMessage);
      do Output.moveCursor(14, 28);
      do Output.printString(hardLevelMessage);

      // Отрисовка указателя выбора
      do drawDifficultyPointer();

      return;
   }

   // Отрисовка стрелки-указателя текущей сложности
   method void drawDifficultyPointer()
   {
      // Рисуем стрелку из нескольких линий
      do Utils.drawLineByOffset(0, 0, 0, 8, difficultyPointerX, difficultyPointerYPositions[currentDifficulty]);
      do Utils.drawLineByOffset(1, 1, 1, 7, difficultyPointerX, difficultyPointerYPositions[currentDifficulty]);
      do Utils.drawLineByOffset(2, 2, 2, 6, difficultyPointerX, difficultyPointerYPositions[currentDifficulty]);
      do Utils.drawLineByOffset(3, 3, 3, 5, difficultyPointerX, difficultyPointerYPositions[currentDifficulty]);
      do Utils.drawPixelByOffset(4, 4, difficultyPointerX, difficultyPointerYPositions[currentDifficulty]);

      return;
   }

   // Отображение счета игрока
   method void drawPlayerScore(int score)
   {
      do Output.moveCursor(0, 0);
      do Output.printString(difficultyMessages[currentDifficulty]); // Текущая сложность
      do Output.printString(scoreMessage); // Текст "Счет: "
      do Output.printInt(score); // Числовое значение счета
   
      return;
   }

   // Отрисовка экрана завершения игры
   method void drawFinalWindow(int score)
   {
      do Output.moveCursor(10, 18);
      do Output.printString(finalMessage1); // "Вы проиграли"
      do Output.moveCursor(11, 18);
      do Output.printString(finalMessage2); // "Ваш результат: "
      do Output.printInt(score); // Вывод счета
      do Output.moveCursor(12, 18);
      do Output.printString(finalMessage3); // Инструкция продолжения

      return;
   }

   // Перемещение указателя сложности
   method void moveDifficultyPointer(int delta)
   {
      // Изменяем сложность с проверкой границ (0-2)
      let currentDifficulty = Utils.mod(currentDifficulty + delta, 3);

      return;
   }

   // Освобождение ресурсов
   method void dispose()
   {
      // Освобождение памяти всех строковых полей
      do Memory.deAlloc(welcomeMessage1);
      do Memory.deAlloc(welcomeMessage2);
      do Memory.deAlloc(welcomeMessage3);

      do Memory.deAlloc(scoreMessage);

      do Memory.deAlloc(finalMessage1);
      do Memory.deAlloc(finalMessage2);
      do Memory.deAlloc(finalMessage3);

      do Memory.deAlloc(easyLevelMessage);
      do Memory.deAlloc(mediumLevelMessage);
      do Memory.deAlloc(hardLevelMessage);

      // Освобождение массивов
      do Memory.deAlloc(difficultyPointerYPositions);
      do Memory.deAlloc(difficultyMessages);

      return;
   }
}